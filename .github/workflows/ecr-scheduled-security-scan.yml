name: ECR vulnerability detection

on:
  schedule:
    - cron: '10 0 * * *'
  push:
    branches:
      - master

jobs:
  vulnerability-detection:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          ### Rabbitmq 3.7
          - image: "3.7.14/Dockerfile"
            tag: "3.7.14"
            platforms: "linux/amd64"
          - image: "3.7.14/amqp1/Dockerfile"
            tag: "3.7.14-amqp1"
            platforms: "linux/amd64"
          - image: "3.7.14/shovel/Dockerfile"
            tag: "3.7.14-shovel"
            platforms: "linux/amd64"
          ### Rabbitmq 3.8
          - image: "3.8/Dockerfile"
            tag: "3.8"
            platforms: "linux/amd64"
          - image: "3.8/amqp1/Dockerfile"
            tag: "3.8-amqp1"
            platforms: "linux/amd64"
          - image: "3.8/shovel/Dockerfile"
            tag: "3.8-shovel"
            platforms: "linux/amd64"
          ### Rabbitmq 3.9
          - image: "3.9/Dockerfile"
            tag: "3.9"
            platforms: "linux/amd64"
          - image: "3.9/amqp1/Dockerfile"
            tag: "3.9-amqp1"
            platforms: "linux/amd64"
          - image: "3.9/shovel/Dockerfile"
            tag: "3.9-shovel"
            platforms: "linux/amd64"
          ### Rabbitmq 3.10
          - image: "3.10/Dockerfile"
            tag: "3.10"
            platforms: "linux/amd64"
          - image: "3.10/amqp1/Dockerfile"
            tag: "3.10-amqp1"
            platforms: "linux/amd64"
          - image: "3.10/shovel/Dockerfile"
            tag: "3.10-shovel"
            platforms: "linux/amd64"
          ### Rabbitmq 3.11
          - image: "3.11/Dockerfile"
            tag: "3.11"
            platforms: "linux/amd64"
          - image: "3.11/amqp1/Dockerfile"
            tag: "3.11-amqp1"
            platforms: "linux/amd64"
          - image: "3.11/shovel/Dockerfile"
            tag: "3.11-shovel"
            platforms: "linux/amd64"
          ### Rabbitmq 3.12
          - image: "3.12/Dockerfile"
            tag: "3.12"
            platforms: "linux/amd64"
          - image: "3.12/amqp1/Dockerfile"
            tag: "3.12-amqp1"
            platforms: "linux/amd64"
          - image: "3.12/shovel/Dockerfile"
            tag: "3.12-shovel"
            platforms: "linux/amd64"
          ### Rabbitmq 3.13
          - image: "3.13/Dockerfile"
            tag: "3.13"
            platforms: "linux/amd64"
          - image: "3.13/amqp1/Dockerfile"
            tag: "3.13-amqp1"
            platforms: "linux/amd64"
          - image: "3.13/shovel/Dockerfile"
            tag: "3.13-shovel"
            platforms: "linux/amd64"

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to AWS ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push
        id: docker-build
        uses: docker/build-push-action@v6
        with:
          push: true
          file: ${{ matrix.image }}
          tags: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.AWS_ECR_REPO }}:${{ matrix.tag }}-${{ github.sha }}
          platforms: ${{ matrix.platforms }}

      - name: Scan Docker image
        id: docker-scan
        uses: alexjurkiewicz/ecr-scan-image@v2.0.0
        with:
          repository: ${{ secrets.AWS_ECR_REPO }}
          tag: ${{ join(matrix.tag) }}-${{ github.sha }}
        continue-on-error: true

      - name: Delete images after scan images
        run: |
          aws ecr batch-delete-image --repository-name ${{ secrets.AWS_ECR_REPO }} --image-id imageTag="${{ join(matrix.tag) }}-${{ github.sha }}"

      - run: |
          echo "${{ steps.docker-scan.outputs.total }} total vulnerabilities."

      - name: Set Date and Time
        id: set-date
        if: github.event.schedule == '10 0 * * *'
        run: echo "::set-output name=current_datetime::$(date +'%Y-%m-%d %H:%M:%S')"

      - name: Set Color
        id: set-color
        if: github.event.schedule == '10 0 * * *'
        run: |
          if [[ "${{ true }}" ]]; then
            COLOR="#008000"
          else
            COLOR="#ff0000"
          fi
          echo "::set-output name=color::$COLOR"

      - name: Send GitHub Action trigger data to Slack workflow
        id: slack
        if: github.event.schedule == '10 0 * * *'
        uses: slackapi/slack-github-action@v2
        with:
          payload: |
            {
              "text": "Scanned RabbitMQ image tag *${{ matrix.tag }}*.",
              "attachments": [
                {
                  "pretext": "ECR vulnerability scan outputs for ${{ steps.set-date.outputs.current_datetime }}",
                  "color": "${{ steps.set-color.outputs.color }}",
                  "fields": [
                    {
                      "title": "Status",
                      "short": true,
                      "value": "*${{ steps.docker-scan.outputs.total }}* total vulnerabilities"
                    }
                  ]
                }
              ]
            }
          webhook: ${{ secrets.WEBHOOK_CE_SECURITY_SCAN_RABBITMQ }}
          webhook-type: incoming-webhook

      - name: Fail the execution
        if: ${{ steps.docker-scan.outputs.total > 0 }}
        run: exit 1
